import { useState } from "react";
import { useParking } from "./ParkingContext";

const Quanliravao = () => {
  const { occupancy, traffic } = useParking();
  const [searchTerm, setSearchTerm] = useState(""); 
  if (!traffic) return <p>ƒêang t·∫£i...</p>;

  const xeVao = traffic.records.filter((r) => r.type === "Xe v√†o");
  const xeRa = traffic.records.filter((r) => r.type === "Xe ra");
  
  const availableSlots = occupancy.totalSlots - occupancy.usedSlots;

  // ‚úÖ H√†m l·ªçc theo t·ª´ kh√≥a
  const filterRecords = (records) => {
    if (!searchTerm.trim()) return records; // n·∫øu ch∆∞a nh·∫≠p g√¨ th√¨ hi·ªán t·∫•t c·∫£
    return records.filter((r) =>
      Object.values(r)
        .join(" ") // n·ªëi to√†n b·ªô th√¥ng tin l·∫°i
        .toLowerCase()
        .includes(searchTerm.toLowerCase())
    );
  };

  const filteredXeVao = filterRecords(xeVao);
  const filteredXeRa = filterRecords(xeRa);

  const [pageIn, setPageIn] = useState(1);
  const [pageOut, setPageOut] = useState(1);
  const rowsPerPage = 3;

  return (
    <>
      <p className="trangthai">Ch√†o m·ª´ng tr·ªü l·∫°i !</p>
      <img className="dashboard-image" src="/images/userimage.png" ></img>
      
    {/* üîç Thanh t√¨m ki·∫øm */}
      <div className="search-bar">
        <input
          type="text"
          placeholder="Nh·∫≠p t√™n kh√°ch h√†ng / bi·ªÉn s·ªë xe..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>
    <div className="box-chung"> 
      
      {/* Box th·ªëng k√™ xe ra/v√†o */}
      <div className="dashboard-stats">
        <div className="stat-box-1">
          <p>L∆∞·ª£t xe v√†o h√¥m nay</p>
          <p className="stat-number">{traffic.totalIn}</p>
        </div>
        <div className="stat-box-2">
          <p>L∆∞·ª£t xe ra h√¥m nay</p>
          <p className="stat-number">{traffic.totalOut}</p>
        </div>
        <div className="stat-box-3">
          <p>S·ªë v·ªã tr√≠ ch·ªó tr·ªëng</p>
          <p className="stat-number" id="3">{availableSlots}/{occupancy.totalSlots} ch·ªó</p>
        </div>

      </div>

        <div className="table-box">
      <h2>Danh s√°ch xe ra/v√†o h√¥m nay</h2>

      {/* ---------------- B·∫¢NG XE V√ÄO ---------------- */}
      <h3 className="sub-title">L∆∞·ª£t xe v√†o</h3>

      {filteredXeVao.length === 0 ? (
        <p>Kh√¥ng t√¨m th·∫•y xe v√†o ph√π h·ª£p</p>
      ) : (
        <>
          <table>
            <thead>
              <tr>
                <th>STT</th>
                <th>H·ªç v√† t√™n</th>
                <th>Bi·ªÉn s·ªë</th>
                <th>Lo·∫°i</th>
                <th>Th·ªùi gian</th>
              </tr>
            </thead>
            <tbody>
              {filteredXeVao
                .slice((pageIn - 1) * rowsPerPage, pageIn * rowsPerPage)
                .map((r, index) => (
                  <tr key={r.id}>
                    <td>{index + 1}</td>
                    <td>{r.name}</td>
                    <td>{r.license}</td>
                    <td>{r.type}</td>
                    <td>{r.time}</td>
                  </tr>
                ))}
            </tbody>
          </table>

          {/* N√∫t chuy·ªÉn trang xe v√†o */}
          <div className="pagination">
            <button
              disabled={pageIn === 1}
              onClick={() => setPageIn(pageIn - 1)}
            >
              ‚óÄ Trang tr∆∞·ªõc
            </button>
            <span>
              Trang {pageIn} / {Math.ceil(filteredXeVao.length / rowsPerPage)}
            </span>
            <button
              disabled={pageIn === Math.ceil(filteredXeVao.length / rowsPerPage)}
              onClick={() => setPageIn(pageIn + 1)}
            >
              Trang sau ‚ñ∂
            </button>
          </div>
        </>
      )}

      {/* ---------------- B·∫¢NG XE RA ---------------- */}
      <h3 className="sub-title">L∆∞·ª£t xe ra</h3>

      {filteredXeRa.length === 0 ? (
        <p>Kh√¥ng t√¨m th·∫•y xe ra ph√π h·ª£p</p>
      ) : (
        <>
          <table>
            <thead>
              <tr>
                <th>STT</th>
                <th>H·ªç v√† t√™n</th>
                <th>Bi·ªÉn s·ªë</th>
                <th>Lo·∫°i</th>
                <th>Th·ªùi gian</th>
              </tr>
            </thead>
            <tbody>
              {filteredXeRa
                .slice((pageOut - 1) * rowsPerPage, pageOut * rowsPerPage)
                .map((r, index) => (
                  <tr key={r.id}>
                    <td>{index + 1}</td>
                    <td>{r.name}</td>
                    <td>{r.license}</td>
                    <td>{r.type}</td>
                    <td>{r.time}</td>
                  </tr>
                ))}
            </tbody>
          </table>

          {/* N√∫t chuy·ªÉn trang xe ra */}
          <div className="pagination">
            <button
              disabled={pageOut === 1}
              onClick={() => setPageOut(pageOut - 1)}
            >
              ‚óÄ Trang tr∆∞·ªõc
            </button>
            <span>
              Trang {pageOut} / {Math.ceil(filteredXeRa.length / rowsPerPage)}
            </span>
            <button
              disabled={pageOut === Math.ceil(filteredXeRa.length / rowsPerPage)}
              onClick={() => setPageOut(pageOut + 1)}
            >
              Trang sau ‚ñ∂
            </button>
          </div>
        </>
      )}
    </div>
    </div> 
    </>
  )
};

export default Quanliravao;
